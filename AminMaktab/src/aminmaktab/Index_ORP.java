/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aminmaktab;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.util.Scanner;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author ABC
 */
public class Index_ORP extends javax.swing.JInternalFrame {

    /**
     * Creates new form Index_ORP
     */
    String Type = "";
    String NameToUse = "";
    public Index_ORP() {
        initComponents();
        Download.setVisible(false);
    }
    public Index_ORP(String GetName, String GetType) {
        initComponents();
        Type = GetType;
        NameToUse = GetName;
        try
        {
            File myFile = new File("ORP.txt");
            if(myFile.exists())
            {
                Scanner myRead = new Scanner(myFile);
                boolean check = false;
                while(myRead.hasNextLine())
                {
                    String data = myRead.nextLine();
                    if(data.equals("Index"))
                    {
                        data = myRead.nextLine();
                        if(data.equals(GetName))
                        {
                            fullname.setText(data);
                            data = myRead.nextLine();
                            fathername.setText(data);
                            data = myRead.nextLine();
                            ImageIcon icon1 = new ImageIcon(data);
                            Image img1 = icon1.getImage();
                            Image img2 = img1.getScaledInstance(188, 188, Image.SCALE_SMOOTH);
                            ImageIcon icon2 = new ImageIcon(img2);
                            imageIcon.setIcon(icon2);
                            check = true;
                            break;
                        }
                    }
                    else
                    {
                        check = false;
                    }
                }
                if(check == true)
                {
                    JFrame j = new JFrame();
                    JOptionPane.showMessageDialog(j,"Successfully Displayed Data...");
                }
                if(check == false)
                {
                    JFrame j = new JFrame();
                    JOptionPane.showMessageDialog(j,"Error: Data Not Found...");
                }
                myRead.close();
            }
            else
            {
                myFile.createNewFile();
            }
        }
        catch(IOException ex)
        {
            System.out.println("Error");
            ex.printStackTrace();
        }
        if(Type.equals("Delete"))
        {
            uploadFile.setVisible(false);
            Download.setVisible(false);
            submitBtn.setText("Delete Record");
        }
        else if(Type.equals("Update"))
        {
            Download.setVisible(false);
            submitBtn.setText("Update Record");
        }
        else if(Type.equals("Read"))
        {
            uploadFile.setVisible(false);
            submitBtn.setVisible(false);
            Download.setVisible(true);
        }
    }
    String filename = "";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        imageIcon = new javax.swing.JLabel();
        uploadFile = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        fullname = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        fathername = new javax.swing.JTextField();
        submitBtn = new javax.swing.JButton();
        Download = new javax.swing.JButton();

        setClosable(true);
        setTitle("INDEX | ORP");

        imageIcon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        uploadFile.setText("File Chooser");
        uploadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadFileActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Name:");

        fullname.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fullname.setText("Enter FullName");
        fullname.setToolTipText("");
        fullname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fullnameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fullnameFocusLost(evt);
            }
        });
        fullname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullnameActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Father's Name");

        fathername.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fathername.setText("Enter Father's Name");
        fathername.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fathernameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fathernameFocusLost(evt);
            }
        });

        submitBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        submitBtn.setText("Submit");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        Download.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Download.setText("Download");
        Download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownloadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(269, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Download, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(submitBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(fathername, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(fullname, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(uploadFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(imageIcon, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addGap(266, 266, 266))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(uploadFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fullname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fathername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(submitBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Download)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownloadActionPerformed
        // TODO add your handling code here:
        Download.setVisible(false);
        PrinterJob printerJob = PrinterJob.getPrinterJob();
        printerJob.setJobName("Print Record");
        printerJob.setPrintable(new Printable()
        {
            @Override
            public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException
            {
                if (pageIndex > 0) 
                {
                    return Printable.NO_SUCH_PAGE;
                }

                // get the bounds of the component
                Dimension dim = jPanel1.getSize();
                double cHeight = dim.getHeight();
                double cWidth = dim.getWidth();

                // get the bounds of the printable area
                double pHeight = pageFormat.getImageableHeight();
                double pWidth = pageFormat.getImageableWidth();

                double pXStart = pageFormat.getImageableX();
                double pYStart = pageFormat.getImageableY();

                double xRatio = pWidth / cWidth;
                double yRatio = pHeight / cHeight;


                Graphics2D g2 = (Graphics2D)graphics;
                g2.translate(pXStart, pYStart);
                g2.scale(xRatio, yRatio);
                jPanel1.paint(g2);

                return Printable.PAGE_EXISTS;
            }
        });
        boolean returnResult = printerJob.printDialog();
        if(returnResult)
        {
            try{
                printerJob.print();
            }catch(PrinterException pr)
            {
                pr.printStackTrace();
            }
        }
        Download.setVisible(true);
    }//GEN-LAST:event_DownloadActionPerformed

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        // TODO add your handling code here:
        String FullName = fullname.getText().toString();
        String FatherName = fathername.getText().toString();

        if(FullName.isEmpty() == true)
        {
            JFrame j = new JFrame();
            JOptionPane.showMessageDialog(j,"Error: Input Student's Name...");
        }
        if(FatherName.isEmpty() == true)
        {
            JFrame j = new JFrame();
            JOptionPane.showMessageDialog(j,"Error: Input Father's Name...");
        }
        if(!Type.equals("Delete") && !Type.equals("Update"))
        {
            try
            {
                String path = "Pictures";
                File directory = new File(path);
                if(!directory.exists())
                {
                    directory.mkdir();
                }
                File sourceFile = null;
                File destFile = null;
                sourceFile = new File(filename);
                String ext = filename.substring(filename.lastIndexOf('.') + 1);
                destFile = new File(path+"/"+FullName+"."+ext);
                Files.copy(sourceFile.toPath(), destFile.toPath());

                FileWriter writer = new FileWriter("ORP.txt", true);
                writer.append("Index");
                writer.append(System.getProperty("line.separator"));
                writer.append(FullName);
                writer.append(System.getProperty("line.separator"));
                writer.append(FatherName);
                writer.append(System.getProperty("line.separator"));
                writer.append(destFile.toString());
                writer.append(System.getProperty("line.separator"));
                writer.append(System.getProperty("line.separator"));
                writer.close();

                JOptionPane.showMessageDialog(rootPane,"Successfull...");
            }
            catch(IOException ex)
            {
                System.out.println("Error");
                ex.printStackTrace();
            }
        }
        else if(Type.equals("Delete"))
        {
            String tempFile = "temp.txt";
            File oldFile = new File("ORP.txt");
            File newFile = new File(tempFile);

            try
            {
                FileWriter fw = new FileWriter(tempFile,true);
                BufferedWriter bw = new BufferedWriter(fw);
                PrintWriter pw = new PrintWriter(bw);
                Scanner read = new Scanner(new File("ORP.txt"));

                while(read.hasNext())
                {
                    String data = read.nextLine();
                    if(!data.equals("Index"))
                    {
                        pw.println(data);
                    }
                    else
                    {
                        pw.println(data);
                        data = read.nextLine();
                        if(!data.equals(NameToUse))
                        {
                            pw.println(data);
                        }
                        else
                        {
                            data = read.nextLine();
                            data = read.nextLine();
                            data = read.nextLine();
                            data = read.nextLine();
                        }
                    }
                }
                read.close();
                pw.flush();
                pw.close();

                oldFile.delete();
                File dump = new File("ORP.txt");
                newFile.renameTo(dump);
                JOptionPane.showMessageDialog(rootPane,"Deleted Successfully...");
                fullname.setText(null);
                fathername.setText(null);
                imageIcon.setIcon(null);
            }
            catch(IOException ex)
            {
                System.out.println("Error");
                ex.printStackTrace();
            }
        }
        else if(Type.equals("Update"))
        {
            String tempFile = "temp.txt";
            File oldFile = new File("ORP.txt");
            File newFile = new File(tempFile);
            try
            {
                FileWriter fw = new FileWriter(tempFile,true);
                BufferedWriter bw = new BufferedWriter(fw);
                PrintWriter pw = new PrintWriter(bw);
                Scanner read = new Scanner(new File("ORP.txt"));
                while(read.hasNext())
                {
                    String data = read.nextLine();
                    if(!data.equals("Index"))
                    {
                        pw.println(data);
                    }
                    else
                    {
                        pw.println(data);
                        data = read.nextLine();
                        if(!data.equals(NameToUse))
                        {
                            pw.println(data);
                        }
                        else
                        {
                            pw.println(FullName);
                            data = read.nextLine();
                            pw.println(FatherName);
                            data = read.nextLine();
                            pw.println(data);
                            pw.println("");
                        }
                    }
                }
                read.close();
                pw.flush();
                pw.close();

                oldFile.delete();
                File dump = new File("ORP.txt");
                newFile.renameTo(dump);
                JOptionPane.showMessageDialog(rootPane,"Updated Successfully...");
            }
            catch(IOException ex)
            {
                System.out.println("Error");
                ex.printStackTrace();
            }
        }

        }

        private void UsernamefieldActionPerformed(java.awt.event.ActionEvent evt) {
            // TODO add your handling code here:

        }

        private void PasswordfieldActionPerformed(java.awt.event.ActionEvent evt) {
            // TODO add your handling code here:

        }

        private void UsernamefieldFocusGained(java.awt.event.FocusEvent evt) {
            // TODO add your handling code here:

    }//GEN-LAST:event_submitBtnActionPerformed

    private void fathernameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fathernameFocusLost
        // TODO add your handling code here:
        if(fathername.getText().toString().equals(""))
        {
            fathername.setText("Enter Father's Name");
        }
    }//GEN-LAST:event_fathernameFocusLost

    private void fathernameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fathernameFocusGained
        // TODO add your handling code here:
        if(fathername.getText().toString().equals("Enter Father's Name"))
        {
            fathername.setText("");
        }
    }//GEN-LAST:event_fathernameFocusGained

    private void fullnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fullnameActionPerformed

    private void fullnameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fullnameFocusLost
        // TODO add your handling code here:
        if(fullname.getText().toString().equals(""))
        {
            fullname.setText("Enter FullName");
        }
    }//GEN-LAST:event_fullnameFocusLost

    private void fullnameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fullnameFocusGained
        // TODO add your handling code here:
        if(fullname.getText().toString().equals("Enter FullName"))
        {
            fullname.setText("");
        }
    }//GEN-LAST:event_fullnameFocusGained

    private void uploadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadFileActionPerformed
        // TODO add your handling code here:
        JFileChooser choose = new JFileChooser();
        choose.showOpenDialog(null);
        File file = choose.getSelectedFile();
        filename = file.getAbsolutePath().toString();
        ImageIcon icon1 = new ImageIcon(filename);
        Image img1 = icon1.getImage();
        Image img2 = img1.getScaledInstance(imageIcon.getWidth(), imageIcon.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon icon2 = new ImageIcon(img2);
        imageIcon.setIcon(icon2);
    }//GEN-LAST:event_uploadFileActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Download;
    private javax.swing.JTextField fathername;
    private javax.swing.JTextField fullname;
    private javax.swing.JLabel imageIcon;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton submitBtn;
    private javax.swing.JButton uploadFile;
    // End of variables declaration//GEN-END:variables
}
